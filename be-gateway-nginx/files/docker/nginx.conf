daemon off;

# NOTE: By using the following 'env' params the host env vars are made available to nginx
# And, in this case, since OpenShift exposes certain env vars automatically, and by following
# OpenShift convention you just need to provide here the names of your services.
# For example, if you want to route/proxy to only one service/deployment named "my-cool-app" then
# just replace "YOUR_APP" by "MY_COOL_APP" and keep the suffixes.
# Therefore, there is no need to define them in the env vars of the deploymentconfig.
env YOUR_APP_SERVICE_HOST;
env YOUR_APP_SERVICE_PORT;

# There is a known bug with sessions not sticking properly and causing spontaneous 403's
# If using OIDC Lua module uncomment this
# env SESSION_SECRET;

# set to 1 as we run the pod with less than a CPU core
worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

events {
    worker_connections  1024;
}

# https://openresty-reference.readthedocs.io/en/latest/Directives/
http {
    # Lua configurations
    lua_package_path    '/usr/local/openresty/lualib/?.lua;;';
    lua_ssl_verify_depth 2;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-bundle.trust.crt;

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    error_log /dev/stdout warn;
    access_log /dev/stdout main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    # https://nginx.org/en/docs/http/ngx_http_gzip_module.html
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types "*";
    gzip_disable "msie6";

    # good practices from https://cipherlist.eu/
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_buffer_size 4k;
    ssl_stapling on;
    ssl_stapling_verify on;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header x-xss-protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header Content-Security-Policy   "upgrade-insecure-requests; frame-ancestors 'none'" always;
    # If running only over APIs you could uncomment and switch to the following Content-Security-Policy header definition, but
    # you can also use the following header definition if you define specific accepted URLs, like 'self' and specific third-party libraries or dependencies you know you trust
    # add_header Content-Security-Policy "upgrade-insecure-requests; default-src 'none'; script-src 'none'; img-src 'none' data:; style-src 'none' 'unsafe-inline'; font-src 'none' data:; frame-src 'none'; connect-src 'none' https://apis.google.com; object-src 'none' ";

    server {
        listen  8080   default_server;
        listen  [::]:8080   default_server;

        server_name _;

        client_max_body_size 50M;
        client_body_buffer_size 50M;

        # NOTE: please, substitute accordingly with env vars defined at the beginning of this file
        set_by_lua $your_app_service_host 'return os.getenv("YOUR_APP_SERVICE_HOST")';
        set_by_lua $your_app_service_port 'return os.getenv("YOUR_APP_SERVICE_PORT")';

        # There is a known bug with sessions not sticking properly and causing spontaneous 403's
        # If using OIDC Lua module uncomment this (see 'env' related param at the beginning of this file)
        # set_by_lua $session_secret 'return os.getenv("SESSION_SECRET")';

        # Don't reveal OpenResty version to clients.
        server_tokens off;

        # modifying HTTP server signature header
        # more_set_headers "Server: Your App";

        # disable cache
        # expires 0;
        # add_header Cache-Control private;

        location / {
            include resolver.conf;
            # access_by_lua_block {
            #     require("your-auth-service").authenticate()
            # }
            proxy_pass http://$your_app_service_host:$your_app_service_port;
        }

        # NGINX HEALTH ENDPOINT (e.g.: OPENSHIFT PROBES)
        location = /health {
            access_log off;
            allow 127.0.0.1;
            deny all;
            add_header Content-Type application/json;
            return 200 '{"status":"up"}';
        }

        # NGINX STUB PROBE (e.g.: DEBUGGING AND/OR OPENSHIFT PROBES)
        location = /status {
            access_log off;
            allow 127.0.0.1;
            deny all;
            stub_status;
        }

        # ERROR HANDLING (NOTE: you might need to adapt to your needs)

        # 40X
        error_page 400 401 402 403 404 /40x.html;

        location = /40x.html {
            content_by_lua_block {
                require("server-error").make_error('40x')
            }
        }

        # 50X
        error_page 500 501 502 503 504 /50x.html;

        location = /50x.html {
            content_by_lua_block {
                require("server-error").make_error('50x')
            }
        }
    }
}
