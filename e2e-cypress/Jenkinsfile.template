// See https://www.opendevstack.org/ods-documentation/ for usage and customization.

@Library('ods-jenkins-shared-library@@shared_library_ref@') _

node {
  dockerRegistry = env.DOCKER_REGISTRY
  cypressRecordKey = env.CYPRESS_RECORD_KEY
}

odsComponentPipeline(
  podContainers: [
      containerTemplate(
        name: 'jnlp',
        image: "${dockerRegistry}/ods/jenkins-agent-nodejs22:@agent_image_tag@",
        workingDir: '/tmp',
        envVars: [
          envVar(key: 'CYPRESS_RECORD_KEY', value: cypressRecordKey)
        ],
        resourceRequestCpu: '100m',
        resourceLimitCpu: '300m',
        resourceRequestMemory: '1Gi',
        resourceLimitMemory: '2Gi',
        alwaysPullImage: true,
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ],
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/': 'test'
  ]
) { context ->

  def targetDirectory = "${context.projectId}/${context.componentId}/${context.gitBranch.replaceAll('/', '-')}/${context.buildNumber}"

  stageInstall(context)
  stageTypeCheck(context)
  stageTest(context)
  odsComponentStageScanWithSonar(context)

  if (fileExists('cypress/screenshots.zip')) {
    odsComponentStageUploadToNexus(context,
      [
        distributionFile: 'cypress/screenshots.zip',
        repository: 'leva-documentation',
        repositoryType: 'raw',
        targetDirectory: "${targetDirectory}"
      ]
    )
  }
  if (fileExists('cypress/videos.zip')) {
    odsComponentStageUploadToNexus(context,
      [
        distributionFile: 'cypress/videos.zip',
        repository: 'leva-documentation',
        repositoryType: 'raw',
        targetDirectory: "${targetDirectory}"
      ]
    )
  }
  if (fileExists('cypress/cypress-test-reports-pdf.zip')) {
    odsComponentStageUploadToNexus(context,
      [
        distributionFile: 'cypress/cypress-test-reports-pdf.zip',
        repository: 'leva-documentation',
        repositoryType: 'raw',
        targetDirectory: "${targetDirectory}"
      ]
    )
  }
}


def stageInstall(def context) {
  stage('Install dependencies') {
    sh 'npm ci'
  }
}

def stageTypeCheck(def context) {
  stage('Check types') {
    sh 'npx tsc --noEmit'
  }
}

def stageTest(def context) {
  stage('Functional Tests') {
    // Define your DEV and QA base URLs in a config map in OpenShift; please adapt variable names to your OpenShift config
    // sh "oc project <project-with-configured-secrets>"
    def baseUrls = [
      : // remove this line once you have defined the config map and uncommented the next three lines, it's only here to make the example default case work
      // dev: sh(returnStdout: true, script:"oc get configmaps cypress-config -o jsonpath='{.data.DEV_BASE_URL}'").trim(),
      // test: sh(returnStdout: true, script:"oc get configmaps cypress-config -o jsonpath='{.data.TEST_BASE_URL}'").trim()
      // prod: sh(returnStdout: true, script:"oc get configmaps cypress-config -o jsonpath='{.data.PROD_BASE_URL}'").trim()
    ]

    def baseUrl = baseUrls.get(context.environment ?: 'dev', 'https://www.w3schools.com') // default to W3Schools for demo purposes, replace with your own default

    withEnv(["TAGVERSION=${context.tagversion}",
      "NEXUS_HOST=${context.nexusHost}",
      "OPENSHIFT_PROJECT=${context.targetProject}",
      "OPENSHIFT_APP_DOMAIN=${context.getOpenshiftApplicationDomain()}",
      "COMMIT_INFO_SHA=${context.gitCommit}",
      "BUILD_NUMBER=${context.buildNumber}",
      "BASE_URL=${baseUrl}",
    ]) {
      // For loading environment variables for Azure SSO; please adapt the secrets names to your OpenShift config,
      // making sure to include in the secret names the environment name in lowercase (e.g., e2e-user-dev, e2e-user-test,
      // etc.), in case of using different secrets for different environments.
      // Secrets in OpenShift need to be created with the credential.sync.jenkins.openshift.io=true label to be available in Jenkins.
      // These are examples for loading credentials from the testing user for logging into your application.
      withCredentials([
        // usernamePassword(credentialsId: "${context.projectId}-cd-e2e-user", passwordVariable: 'CYPRESS_PASSWORD', usernameVariable: 'CYPRESS_USERNAME'),
        // string(credentialsId: "${context.projectId}-cd-otp-secret", variable: 'OTP_SECRET')
      ]) {
        // Note: Testing in the production environment is not enabled by default as it can lead to unintended consequences,
        // including potential downtime, data corruption, or exposure of sensitive information.
        // This block is designed to skip acceptance and integration tests in the production environment to avoid these risks.
        // If you choose to enable these tests in production take all necessary precautions. This means verifying your
        // preconditions, database access, fake data, API calls, etc.
        // Remember that any test case in the installation folder will be executed in production.
        def status
        if (context.environment == 'prod') {
          status = sh(script: 'npm run e2e:prod', returnStatus: true)
          sh 'npm run junit-installation-report'
          junit(testResults:'build/test-results/*.xml')
          stash(name: "installation-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/installation-junit.xml', allowEmpty: true)
        } else {
          status = sh(script: 'npm run e2e', returnStatus: true)
          sh 'npm run combine:reports'
          junit(testResults:'build/test-results/*.xml')
          stash(name: "installation-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/installation-junit.xml', allowEmpty: true)
          stash(name: "integration-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/integration-junit.xml', allowEmpty: true)
          stash(name: "acceptance-test-reports-junit-xml-${context.componentId}-${context.buildNumber}", includes: 'build/test-results/acceptance-junit.xml', allowEmpty: true)
        }

        sh 'npm run generate:pdf'
        zip zipFile: 'cypress/cypress-test-reports-pdf.zip', archive: false, dir: 'build/test-results/mochawesome/pdf'
        archiveArtifacts artifacts: 'cypress/cypress-test-reports-pdf.zip', fingerprint: true

        if (fileExists('cypress/videos')) {
          zip zipFile: 'cypress/videos.zip', archive: false, dir: 'cypress/videos'
        }

        if (fileExists('build/test-results/screenshots')) {
          zip zipFile: 'cypress/screenshots.zip', archive: false, dir: 'build/test-results/screenshots'
        }

        if (status != 0) {
          unstable "Some tests have failed or encountered errors. Please check the logs for more details."
        }
      }
    }
  }
}
