buildscript {
    ext {
        nexus_url = "${project.findProperty('nexus_url') ?: System.getenv('NEXUS_URL') ?: System.getenv('NEXUS_HOST')}"
        nexus_user = "${project.findProperty('nexus_user') ?: System.getenv('NEXUS_USERNAME')}"
        nexus_pw = "${project.findProperty('nexus_pw') ?: System.getenv('NEXUS_PASSWORD')}"
        no_nexus = (project.findProperty('no_nexus') ?: System.getenv('NO_NEXUS') ?: false).toBoolean()
        if (!no_nexus && (nexus_url == "null" || nexus_user == "null" || nexus_pw == "null")) {
            throw new GradleException("property no_nexus='false' (or not defined) but at least one of the properties nexus_url, nexus_user or nexus_pw is not configured. Please configure those properties!")
        }

        def folderRel = (String)("${project.findProperty('nexus_folder_releases') ?: System.getenv('NEXUS_FOLDER_RELEASES')}")
        nexusFolderReleases = folderRel == "null" ? "maven-releases" : folderRel

        def folderSnaps = (String)("${project.findProperty('nexus_folder_snapshots') ?: System.getenv('NEXUS_FOLDER_SNAPSHOTS')}")
        nexusFolderSnapshots = folderSnaps == "null" ? "maven-snapshots" : folderSnaps

        snippetsDir = file('build/generated-snippets')
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'com.adarshr.test-logger' version "2.0.0"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

repositories {
    if (no_nexus) {
        println("using repository 'mavenCentral', because property no_nexus=$no_nexus")
        mavenCentral()
    } else {
        println("using nexus repositories")
        maven() {
            url "${nexus_url}/repository/maven-public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }

        maven() {
            url "${nexus_url}/repository/atlassian_public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
    }
}

ext {
    junitVersion = "5.10.1"
    spockVersion = "2.3-groovy-4.0"
    gebVersion = "7.0"
    seleniumVersion = "4.25.0"
    htmlunitVersion = "4.13.0"
    unirestVersion = "3.14.5"
    appiumVersion = "9.3.0"
    chromeDriverVersion = "4.2.2"
    edgeDriverVersion = "4.21.0"
    apiGuardianAPI = "1.1.2"
    CONTINUE_WHEN_TEST_FAIL = true
    // Define environments as project properties to be accessed via system properties in Groovy classes
    // Please, adjust the environments according to your project needs
    environments = [
        DESKTOP: "desktop",
//        MOBILE_BROWSER: "mobile_browser",
//        MOBILE_APP: "mobile_app"
    ]
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "com.konghq:unirest-java:${unirestVersion}"
    testImplementation "org.gebish:geb-spock:${gebVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testImplementation "org.seleniumhq.selenium:htmlunit-driver:${htmlunitVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:${chromeDriverVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-edge-driver:${edgeDriverVersion}"
    testImplementation "io.appium:java-client:${appiumVersion}"
    testImplementation "org.apiguardian:apiguardian-api:${apiGuardianAPI}"
}

sourceSets {
    [TestExecutionPhases.INSTALLATION, TestExecutionPhases.INTEGRATION, TestExecutionPhases.ACCEPTANCE].each { phase ->
        [TestLanguages.JAVA, TestLanguages.GROOVY].each { language ->
            "$phase-$language" {
                "$language" {
                    srcDir "src/test/${phase}/${language}"
                }
                resources {
                    srcDir 'src/test/resources'
                }
                compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
                runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
            }
        }
    }
}

configurations {
    installationCompile.extendsFrom testImplementation
    installationRuntime.extendsFrom testRuntimeClasspath

    integrationCompile.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntimeClasspath

    acceptanceCompile.extendsFrom testImplementation
    acceptanceRuntime.extendsFrom testRuntimeClasspath
}

class TestExecutionPhases {
    static final String INSTALLATION = "installation"
    static final String INTEGRATION = "integration"
    static final String ACCEPTANCE = "acceptance"
}

class TestLanguages {
    static final String JAVA = "java"
    static final String GROOVY = "groovy"
}

def generateTaskName(def type, def language, def env) {
    return "${type}-${language}-${env}"
}

// Task to create in a parametrized way Tests task
def executeTest(def type, def language, def env) {
    return tasks.create(generateTaskName(type, language, env), Test) {
        description = "Runs ${type} tests ${language} in ${env} environment."
        group = "verification-${type}"

        // Specify the tags to include/exclude for each environment
        // Please, adjust the tags according to your project needs
        useJUnitPlatform {
            switch (env) {
                case environments.DESKTOP:
                    includeTags 'test_desktop'
                    break
//                case environments.MOBILE_BROWSER:
//                    includeTags 'test_mobile_browser'
//                    break
//                case environments.MOBILE_APP:
//                    includeTags 'test_mobile_app'
//                    break
            }
        }

        ignoreFailures = "${CONTINUE_WHEN_TEST_FAIL}"
        testClassesDirs = sourceSets["${type}-${language}"].output.classesDirs
        classpath = sourceSets["${type}-${language}"].runtimeClasspath

        systemProperty "geb.env", env

    }
}

test {

    // To create the tasks
    environments.each { env ->
        [TestExecutionPhases.INSTALLATION, TestExecutionPhases.INTEGRATION, TestExecutionPhases.ACCEPTANCE].each { phase ->
            [TestLanguages.JAVA, TestLanguages.GROOVY].each { language ->
                dependsOn executeTest(phase, language, env.value)
            }
        }
        // To define the order
        tasks.findByName(generateTaskName(TestExecutionPhases.ACCEPTANCE, TestLanguages.GROOVY, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.ACCEPTANCE, TestLanguages.JAVA, env.value)
        tasks.findByName(generateTaskName(TestExecutionPhases.ACCEPTANCE, TestLanguages.JAVA, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.INTEGRATION, TestLanguages.GROOVY, env.value)
        tasks.findByName(generateTaskName(TestExecutionPhases.INTEGRATION, TestLanguages.GROOVY, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.INTEGRATION, TestLanguages.JAVA, env.value)
        tasks.findByName(generateTaskName(TestExecutionPhases.INTEGRATION, TestLanguages.JAVA, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.INSTALLATION, TestLanguages.GROOVY, env.value)
        tasks.findByName(generateTaskName(TestExecutionPhases.INSTALLATION, TestLanguages.GROOVY, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.INSTALLATION, TestLanguages.JAVA, env.value)
    }
}

task testProd {
    description = "Runs only the installation phase tests."
    group = "verification"

    // Define dependencies on installation phase tasks
    environments.each { env ->
        [TestLanguages.JAVA, TestLanguages.GROOVY].each { language ->
            dependsOn generateTaskName(TestExecutionPhases.INSTALLATION, language, env.value)
        }
        // To define the order
        tasks.findByName(generateTaskName(TestExecutionPhases.INSTALLATION, TestLanguages.GROOVY, env.value)).mustRunAfter generateTaskName(TestExecutionPhases.INSTALLATION, TestLanguages.JAVA, env.value)
    }
}

tasks.withType(Test) {
    systemProperty 'environments.desktop', environments.DESKTOP
    systemProperty 'environments.mobile_browser', environments.MOBILE_BROWSER
    systemProperty 'environments.mobile_app', environments.MOBILE_APP
}

testlogger {
    showStandardStreams true
}
