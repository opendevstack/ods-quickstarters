// See https://www.opendevstack.org/ods-documentation/ for usage and customization.

@Library('ods-jenkins-shared-library@@shared_library_ref@') _

odsComponentPipeline(
  imageStreamTag: '@ods_namespace@/jenkins-agent-rust:@agent_image_tag@',
  branchToEnvironmentMapping: [
    'master': 'dev',
    // 'release/': 'test'
  ]
) { context ->
  odsComponentFindOpenShiftImageOrElse(context) {
    stageCI(context, true)  // set `lintDependencies` to false if cargo-deny is not needed
    odsComponentStageScanWithSonar(context)
    stageBuild(context)
    odsComponentStageBuildOpenShiftImage(context)
  }
  odsComponentStageRolloutOpenShiftDeployment(context, [
    'selector': "app.kubernetes.io/name=${context.componentId}"
  ])
}

def stageBuild(def context) {
  stage('Cargo Build') {
    sh "cargo build --release"
    sh "cp -r target/release/${context.componentId} docker/app"
  }
}

def stageCI(def context, def lintDependencies) {
  stage('Cargo Check') {
    sh """
        cargo --version
        cargo nextest --version
        cargo llvm-cov --version
        cargo deny --version
        cargo check --all-targets
      """
  }
  stage('Cargo Format') {
    sh """
        cargo fmt --all -- --check
      """
  }
  stage('Cargo Clippy') {
    sh """
        cargo clippy --all-features

        # Clippy reports for SonarQube
        mkdir -p build/test-results/clippy
        cargo clippy --message-format=json &> build/test-results/clippy/report.json
      """
  }
  if (lintDependencies) {
    stage('Cargo Deny') {
      sh """
          mkdir -p build/test-results/deny
          cargo deny --format json check &> build/test-results/deny/cargo-deny-report.json
          cat build/test-results/deny/cargo-deny-report.json
        """
      archiveArtifacts artifacts: 'build/test-results/deny/cargo-deny-report.json', fingerprint: true
    }
  }
  stage('Cargo Test') {
    sh """
      # create report folders
      mkdir -p build/test-results/test
      mkdir -p build/test-results/coverage

      # If required, pre-install llvm-tools-preview to avoid interactive prompt when not using default Jenkins agent toolchain
      # rustup component add llvm-tools-preview --toolchain ${rustVersion}

      # Tests with JUnit XML report, as defined in .config/nextest.toml, and coverage LLVM cov report
      cargo llvm-cov nextest --profile ci --lcov --output-path ./build/test-results/coverage/lcov.info
      cp -r target/nextest/ci/results.xml build/test-results/test

      # (optional) generate the html report and store it in build/test-results/coverage
      # cargo llvm-cov nextest report --html
      # cp -r target/llvm-cov/html/ build/test-results/coverage
      """
  }
}
