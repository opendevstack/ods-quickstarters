def odsNamespace = ''
def odsGitRef = ''
def odsImageTag = ''
def sharedLibraryRef = ''
def agentImageTag = ''
def odsMainBitbucketProject = ''

node {
  odsNamespace = env.ODS_NAMESPACE ?: 'ods'
  odsGitRef = env.ODS_GIT_REF ?: 'master'
  odsImageTag = env.ODS_IMAGE_TAG ?: 'latest'
  sharedLibraryRef = env.SHARED_LIBRARY_REF ?: odsImageTag
  agentImageTag = env.AGENT_IMAGE_TAG ?: odsImageTag
  odsMainBitbucketProject = env.ODS_BITBUCKET_PROJECT ?: 'opendevstack'
}

library("ods-jenkins-shared-library@${sharedLibraryRef}")

odsQuickstarterPipeline(
  imageStreamTag: "${odsNamespace}/jenkins-agent-base:${agentImageTag}",
) { context ->

  odsQuickstarterStageCopyFiles(context)

  stage('Configure metadata.yml for project') {
    sh "sed 's|@project_id@|'${context.projectId}'|g' ${context.sourceDir}/metadata.yml.tmpl > ${context.componentId}/metadata.yml"
  }

  odsQuickstarterStageRenderJenkinsfile(context)

  stage('Setup OpenShift resources') {
    dir(context.sourceDir) {
      sh """./create-ocp-resources.sh \
        --project ${context.projectId} \
        --component ${context.componentId} \
        --bitbucket ${context.bitbucketUrl} \
        --ods-namespace ${odsNamespace} \
        --ods-image-tag ${odsImageTag} \
        --docker-registry ${context.dockerRegistry} \
        --bitbucket-ods-project ${odsMainBitbucketProject}
      """
    }
  }

  stage('Wait for Docgen and Idle') {
    echo "Waiting for Docgen to be up and running in project ${context.projectId}-cd..."
    sh(
      script: """
      set +e
      ready=0
      for i in {1..30}; do
        oc get pods -n ${context.projectId}-cd -l app=${context.projectId}-docgen -o json | jq -e '
          .items[0].status.conditions
          | map(select((.type=="Ready" or .type=="ContainersReady") and .status=="True"))
          | length == 2
        ' && { ready=1; break; }
        echo "Docgen not ready yet, waiting 2s..."
        sleep 2
      done
      set -e
      if [ "\$ready" -ne 1 ]; then
        echo "WARNING: Docgen pod did not become ready after waiting. Attempting recovery..."
        oc rollout cancel dc/docgen -n ${context.projectId}-cd || true
        oc scale dc/docgen --replicas=0 -n ${context.projectId}-cd
        oc rollout latest dc/docgen -n ${context.projectId}-cd
        oc scale dc/docgen --replicas=1 -n ${context.projectId}-cd
        echo "Idling Docgen deployment in project ${context.projectId}-cd..."
        oc idle -n ${context.projectId}-cd docgen
      else
        echo "Idling Docgen deployment in project ${context.projectId}-cd..."
        oc idle -n ${context.projectId}-cd docgen
      fi
      """,
      label: 'Wait for Docgen and Idle'
    )
  }
}
